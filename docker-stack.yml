services:
  api:
    build:
      image: ghcr.io/gsoulat/test_repo:${COMMIT_HASH:-latest}
      restart: on-failure
    deploy:
      mode: replicated
      replicas: 3
      update_config:
          order: start-first
          failure_action: rollback
          delay: 10s
        rollback_config:
          parallelism: 1
          delay: 10s
        restart_policy:
          condition: any
          delay: 5s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8087/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    environment:
      - PYTHONUNBUFFERED=0
      - PYTHONPATH=/app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-router.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/api`)"
      - "traefik.http.services.api-service.loadbalancer.server.port=8087"
      - "traefik.http.routers.api-router.entrypoints=web"
      - "traefik.http.routers.api-router.middlewares=redirect-to-https@docker"
      - "traefik.http.routers.api-router-secure.entrypoints=websecure"
      - "traefik.http.routers.api-router-secure.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api-router-secure.tls=true"
      - "traefik.http.routers.api-router-secure.tls.certresolver=myresolver"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
    command: >
      sh -c "export DATABASE_URL=postgresql://`cat /run/secrets/postgres_user`:`cat /run/secrets/postgres_password`@db:5432/clickdb &&
             python sample_api.py"
    depends_on:
      db:
        condition: service_healthy
    secrets:
      - postgres_password
      - postgres_user

  db:
    image: postgres:16
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    environment:
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_DB=clickdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    secrets:
      - postgres_password
      - postgres_user

  ui:
    build:
      context: ./web_app
      dockerfile: Dockerfile
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ui-router.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/`)"
      - "traefik.http.services.ui-service.loadbalancer.server.port=8501"
      - "traefik.http.routers.ui-router.entrypoints=web"
      - "traefik.http.routers.ui-router.middlewares=redirect-to-https@docker"
      - "traefik.http.routers.ui-router-secure.entrypoints=websecure"
      - "traefik.http.routers.ui-router-secure.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/`)"
      - "traefik.http.routers.ui-router-secure.tls=true"
      - "traefik.http.routers.ui-router-secure.tls.certresolver=myresolver"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
    depends_on:
      - api

  reverse-ports:
    image: traefik:v3.1
    command:
      - "--providers.docker"
      - "--providers.docker.exposedByDefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=gsoulat31@gmail.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - letsencrypt:/letsencrypt
    labels:
      - "traefik.enable=true"

volumes:
  postgres_data:
  letsencrypt:

secrets:
  postgres_password:
    external: true 
  postgres_user:
    external: true

